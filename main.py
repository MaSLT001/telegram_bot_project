import os
import json
import random
from datetime import time
from github import Github
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from deep_translator import GoogleTranslator
from difflib import get_close_matches
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ===== ENV –∑–º—ñ–Ω–Ω—ñ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_OWNER = os.getenv("GITHUB_OWNER")
GITHUB_REPO = os.getenv("GITHUB_REPO")
PUBLIC_CHAT_ID = os.getenv("PUBLIC_CHAT_ID")  # –¥–ª—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è

if not TOKEN or not ADMIN_ID or not GITHUB_TOKEN or not GITHUB_OWNER or not GITHUB_REPO:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

# ===== –§—ñ–ª—å–º–∏ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
user_stats = {}
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)

# ===== GitHub save =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, indent=2, ensure_ascii=False)
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_user(GITHUB_OWNER).get_repo(GITHUB_REPO)
        content = json.dumps(user_stats, indent=2, ensure_ascii=False)
        try:
            file = repo.get_contents(STATS_FILE)
            repo.update_file(path=STATS_FILE, message="Update stats.json", content=content, sha=file.sha)
        except:
            repo.create_file(path=STATS_FILE, message="Create stats.json", content=content)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–∞ GitHub:", e)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def main_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("üéÅ –†–æ–∑—ñ–≥—Ä–∞—à", callback_data="giveaway")],
        [InlineKeyboardButton("‚úâÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all")
        ])
        buttons.append([
            InlineKeyboardButton("üéÅ –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É", callback_data="giveaway_participants")
        ])
    return InlineKeyboardMarkup(buttons)

def film_keyboard(text, is_admin=False):
    buttons = [
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all")
        ])
    return InlineKeyboardMarkup(buttons)

# ===== –î–æ–ø–æ–º—ñ–∂–Ω–∞ =====
def get_message(update: Update):
    return update.message or update.callback_query.message

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É =====
def find_film_by_text(text):
    try:
        translated = GoogleTranslator(source='auto', target='uk').translate(text)
    except:
        translated = text

    for film in movies.values():
        if film['title'].lower() == translated.lower():
            return film

    titles = [f['title'] for f in movies.values()]
    matches = get_close_matches(translated, titles, n=1, cutoff=0.5)
    if matches:
        return next(f for f in movies.values() if f['title'] == matches[0])
    return None

# ===== –ü–æ–∫–∞–∑ —Ñ—ñ–ª—å–º—É =====
async def show_film(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    film = movies.get(code)
    if not film:
        film = find_film_by_text(code)
    message = get_message(update)
    if not film:
        await message.reply_text("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard(update.effective_user.id == ADMIN_ID))
        return
    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    await message.reply_text(text, parse_mode="Markdown", reply_markup=film_keyboard(text, update.effective_user.id == ADMIN_ID))

async def random_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not movies:
        await update.callback_query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    await show_film(update, context, code)
    await update.callback_query.answer()

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    total_users = len(user_stats)
    await update.callback_query.edit_message_text(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}", reply_markup=main_keyboard(True))

# ===== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ–º =====
async def send_all_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    await update.callback_query.edit_message_text("‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
    context.user_data['send_all'] = True

async def handle_send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('send_all') and 'pending_text' not in context.user_data:
        context.user_data['pending_text'] = update.message.text
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="confirm_send_all"),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_send_all")
            ]
        ])
        await update.message.reply_text(
            f"‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º?\n\n{update.message.text}",
            reply_markup=keyboard
        )
        context.user_data['send_all'] = False

async def confirm_send_all_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    text = context.user_data.pop('pending_text', None)
    if text:
        for uid in user_stats:
            try:
                await context.bot.send_message(int(uid), text)
            except:
                pass
        await update.callback_query.edit_message_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", reply_markup=main_keyboard(True))
    else:
        await update.callback_query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏", reply_markup=main_keyboard(True))

async def cancel_send_all_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
    context.user_data.pop('pending_text', None)
    await update.callback_query.edit_message_text("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞", reply_markup=main_keyboard(True))

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("1Ô∏è‚É£ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="support_request")],
        [InlineKeyboardButton("2Ô∏è‚É£ –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="support_collab")],
        [InlineKeyboardButton("3Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ", callback_data="support_giveaway")],
    ])
    await update.callback_query.message.reply_text(
        "‚úâÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )

async def handle_support_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = update.effective_user
    data = query.data
    context.user_data['support_type'] = data
    await query.answer()

    if data == "support_request":
        await query.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, —ñ –º–∏ –π–æ–≥–æ –ø–µ—Ä–µ–¥–∞–º–æ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ.")
    elif data == "support_collab":
        await query.message.reply_text("ü§ù –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é, —ñ –º–∏ –ø–µ—Ä–µ–¥–∞–º–æ –π–æ–≥–æ –∫–æ–º–∞–Ω–¥—ñ.")
    elif data == "support_giveaway":
        await query.message.reply_text(
            f"üéâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–≥—Ä–∞—à—É, –≤–∫–∞–∑–∞–≤—à–∏ –≤–∞—à ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.id}"
        )

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'support_type' not in context.user_data:
        return

    text = update.message.text
    user = update.effective_user
    support_type = context.user_data.pop('support_type')

    if support_type in ["support_request", "support_collab", "support_giveaway"]:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user.id}")]])
        await context.bot.send_message(
            int(ADMIN_ID),
            f"üì© –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name} (@{user.username}):\n\n{text}",
            reply_markup=keyboard
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ.")

# ===== –†–æ–∑—ñ–≥—Ä–∞—à =====
async def join_giveaway_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer("‚úÖ –í–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤!")
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {
            "username": update.effective_user.username,
            "first_name": update.effective_user.first_name
        }
    user_stats[uid]["giveaway"] = True
    save_stats()
    await update.callback_query.message.reply_text("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ üéÅ")

async def giveaway_participants_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    participants = []
    for uid, data in user_stats.items():
        if data.get("giveaway"):
            name = data.get("first_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
            username = f"@{data['username']}" if data.get("username") else ""
            participants.append(f"‚Äì {name} {username} (ID: {uid})")

    count = len(participants)
    text = f"üìã –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É ({count}):\n" + "\n".join(participants) if participants else "‚ö†Ô∏è –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É"

    await update.callback_query.edit_message_text(text, reply_markup=main_keyboard(True))

async def run_giveaway(context: ContextTypes.DEFAULT_TYPE):
    participants = [(uid, data) for uid, data in user_stats.items() if data.get("giveaway")]

    if not participants:
        await context.bot.send_message(ADMIN_ID, "‚ö†Ô∏è –£ —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ –Ω–µ –±—É–ª–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É.")
        return

    winner_id, winner_data = random.choice(participants)
    name = winner_data.get("first_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    username = f"@{winner_data['username']}" if winner_data.get("username") else ""
    user_id = winner_id

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é
    try:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É", callback_data="support")]])
        await context.bot.send_message(
            chat_id=winner_id,
            text=(
                f"üèÜ –í—ñ—Ç–∞—î–º–æ, {name}! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –º—ñ—Å—è—á–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É MEGOGO üéâ\n\n"
                "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–∑, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É."
            ),
            reply_markup=keyboard
        )
    except:
        await context.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—é {name} ({user_id})")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üéÅ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É:\n\nüë§ {name} {username}\nüÜî {user_id}"
    )

    # –°–∫–∏–¥–∞–Ω–Ω—è giveaway
    for uid in user_stats:
        user_stats[uid]["giveaway"] = False
    save_stats()

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": user.username, "first_name": user.first_name}
        save_stats()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}!üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ –π–æ–≥–æ –∫–æ–¥, —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –º–∏ —Ç–æ–±—ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∏ —Ñ—ñ–ª—å–ºüòâ",
        reply_markup=main_keyboard(user.id == ADMIN_ID)
    )

async def movie_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
    save_stats()
    if context.user_data.get('send_all') or 'pending_text' in context.user_data:
        await handle_send_all(update, context)
        return
    if 'support_type' in context.user_data:
        await handle_support_message(update, context)
        return
    await show_film(update, context, code)

# ===== Main =====
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –•–µ–Ω–¥–ª–µ—Ä–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, movie_by_code))

    app.add_handler(CallbackQueryHandler(random_film, pattern="^random_film$"))
    app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(send_all_message, pattern="^send_all$"))
    app.add_handler(CallbackQueryHandler(confirm_send_all_callback, pattern="^confirm_send_all$"))
    app.add_handler(CallbackQueryHandler(cancel_send_all_callback, pattern="^cancel_send_all$"))

    app.add_handler(CallbackQueryHandler(support_callback, pattern="^support$"))
    app.add_handler(CallbackQueryHandler(handle_support_choice, pattern="^support_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message))

    app.add_handler(CallbackQueryHandler(join_giveaway_callback, pattern="^giveaway$"))
    app.add_handler(CallbackQueryHandler(giveaway_participants_callback, pattern="^giveaway_participants$"))

    # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —â–æ–º—ñ—Å—è—Ü—è 1-–≥–æ —á–∏—Å–ª–∞ –æ 12:00
    scheduler = AsyncIOScheduler()
    scheduler.add_job(run_giveaway, "cron", day=1, hour=12, minute=0, args=[app.bot])
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    app.run_polling()

if __name__ == "__main__":
    main()
