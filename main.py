import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

STATS_FILE = "stats.json"
MOVIES_FILE = "movies.json"

# ======= –§–£–ù–ö–¶–Ü–á –°–¢–ê–¢–ò–°–¢–ò–ö–ò =======
def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

stats = load_stats()

# ======= –ö–û–ú–ê–ù–î–ò =======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in stats:
        stats[user_id] = {"name": update.effective_user.full_name, "visits": 0}
    stats[user_id]["visits"] += 1
    save_stats(stats)

    keyboard = [
        [InlineKeyboardButton("üé• –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É", callback_data="support")]
    ]
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {update.effective_user.full_name}!\n"
        f"–í–∏ –≤—ñ–¥–≤—ñ–¥–∞–ª–∏ –±–æ—Ç–∞ {stats[user_id]['visits']} —Ä–∞–∑(—ñ–≤).",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å:\n"
    for uid, data in stats.items():
        text += f"{data['name']}: {data['visits']} —Ä–∞–∑(—ñ–≤)\n"
    await update.message.reply_text(text)

# ======= –§–Ü–õ–¨–ú–ò =======
def load_movies():
    if os.path.exists(MOVIES_FILE):
        with open(MOVIES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

async def random_film_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    movies = load_movies()
    if not movies:
        await update.callback_query.answer("–°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    import random
    film = random.choice(movies)
    await update.callback_query.message.reply_text(f"üé¨ {film}")

# ======= –ü–Ü–î–¢–†–ò–ú–ö–ê =======
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text(
        "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –≤–æ–Ω–æ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–µ –∞–¥–º—ñ–Ω—É."
    )

# ======= –ó–ê–ü–£–°–ö =======
import asyncio

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", send_stats))
    app.add_handler(CallbackQueryHandler(random_film_callback, pattern="random_film"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="support"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    asyncio.run(app.run_polling())
