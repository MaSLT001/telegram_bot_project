import os
import json
import random
import asyncio
from github import Github
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes
)
from deep_translator import GoogleTranslator
from difflib import get_close_matches
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram.helpers import escape_markdown

# ===== ENV –∑–º—ñ–Ω–Ω—ñ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_OWNER = os.getenv("GITHUB_OWNER")
GITHUB_REPO = os.getenv("GITHUB_REPO")

for var in [TOKEN, ADMIN_ID, GITHUB_TOKEN, GITHUB_OWNER, GITHUB_REPO]:
    if not var:
        raise ValueError("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

# ===== –§—ñ–ª—å–º–∏ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# ===== GitHub save =====
def save_stats_to_github():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, indent=2, ensure_ascii=False)
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_user(GITHUB_OWNER).get_repo(GITHUB_REPO)
        content = json.dumps(user_stats, indent=2, ensure_ascii=False)
        try:
            file = repo.get_contents(STATS_FILE)
            repo.update_file(STATS_FILE, "Update stats.json", content, file.sha)
        except Exception:
            repo.create_file(STATS_FILE, "Create stats.json", content)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ GitHub:", e)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def main_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("üéÅ –†–æ–∑—ñ–≥—Ä–∞—à MEGOGO", callback_data="raffle")],
        [InlineKeyboardButton("‚úâÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")])
    return InlineKeyboardMarkup(buttons)

def film_keyboard(text, is_admin=False):
    buttons = [
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")])
    return InlineKeyboardMarkup(buttons)

def support_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úâÔ∏è –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="support_zvernennya")],
        [InlineKeyboardButton("ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="support_spivpratsya")],
        [InlineKeyboardButton("üèÜ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É", callback_data="support_peremoga")]
    ])

# ===== –î–æ–ø–æ–º—ñ–∂–Ω–∞ =====
def get_message(update: Update):
    return update.message or update.callback_query.message

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É =====
def find_film_by_text(text):
    try:
        translated = GoogleTranslator(source='auto', target='uk').translate(text)
    except:
        translated = text
    for film in movies.values():
        if film['title'].lower() == translated.lower():
            return film
    titles = [f['title'] for f in movies.values()]
    matches = get_close_matches(translated, titles, n=1, cutoff=0.5)
    if matches:
        return next(f for f in movies.values() if f['title'] == matches[0])
    return None

# ===== –ü–æ–∫–∞–∑ —Ñ—ñ–ª—å–º—É =====
async def show_film(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    film = movies.get(code) or find_film_by_text(code)
    message = get_message(update)
    if not film:
        await message.reply_text("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard(update.effective_user.id == ADMIN_ID))
        return
    last_msg = context.user_data.get("last_film_message")
    text = f"üé¨ *{escape_markdown(film['title'], version=2)}*\n\n{escape_markdown(film['desc'], version=2)}\n\nüîó {film['link']}"
    if last_msg:
        try:
            await last_msg.edit_reply_markup(reply_markup=None)
        except:
            pass
    sent = await message.reply_text(text, parse_mode="MarkdownV2", reply_markup=film_keyboard(text, update.effective_user.id == ADMIN_ID))
    context.user_data["last_film_message"] = sent

# ===== –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º =====
async def random_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not movies:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    await show_film(update, context, code)
    if update.callback_query:
        await update.callback_query.answer()

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    total_users = len(user_stats)
    await update.callback_query.edit_message_text(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}", reply_markup=main_keyboard(True))

# ===== –†–æ–∑—ñ–≥—Ä–∞—à =====
async def raffle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = get_message(update)
    await message.reply_text(
        "üéÅ –†–æ–∑—ñ–≥—Ä–∞—à –º—ñ—Å—è—á–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ MEGOGO!\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="raffle_join")]])
    )

async def raffle_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
    user_stats[uid]["raffle"] = True
    save_stats_to_github()
    await update.callback_query.answer("‚úÖ –í–∏ —Å—Ç–∞–ª–∏ —É—á–∞—Å–Ω–∏–∫–æ–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")
    await update.callback_query.edit_message_text("‚úÖ –í–∏ —Å—Ç–∞–ª–∏ —É—á–∞—Å–Ω–∏–∫–æ–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
CHOOSING_SECTION, TYPING_MESSAGE, WAITING_ADMIN_REPLY = range(3)
pending_replies = {}

async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:", reply_markup=support_keyboard())
    return CHOOSING_SECTION

async def choose_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    section = query.data.split("_")[1]
    context.user_data["support_section"] = section
    await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:")
    return TYPING_MESSAGE

async def user_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    section = context.user_data.get("support_section", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    section_names = {"zvernennya": "üì© –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", "spivpratsya": "ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è", "peremoga": "üèÜ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É"}
    section_text = section_names.get(section, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–æ–∑–¥—ñ–ª")
    keyboard = [[
        InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{update.effective_user.id}"),
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f"close_{update.effective_user.id}")
    ]]
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"‚úâÔ∏è –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É\n\n"
            f"üë§ –í—ñ–¥: {update.effective_user.full_name} (@{update.effective_user.username})\n"
            f"üÜî ID: {update.effective_user.id}\n"
            f"üìÇ –†–æ–∑–¥—ñ–ª: {section_text}\n\n"
            f"üì® –¢–µ–∫—Å—Ç: {text}"
        ),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
    context.user_data.pop("support_section", None)
    return ConversationHandler.END

async def admin_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[1])
    pending_replies[ADMIN_ID] = user_id
    await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return WAITING_ADMIN_REPLY

async def admin_close_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–∫—Ä–∏—Ç–æ")
    user_id = int(query.data.split("_")[1])
    if ADMIN_ID in pending_replies and pending_replies[ADMIN_ID] == user_id:
        del pending_replies[ADMIN_ID]
    await query.message.reply_text("‚ùå –î—ñ–∞–ª–æ–≥ —ñ–∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑–∞–∫—Ä–∏—Ç–æ.")

async def admin_reply_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        user_id = pending_replies.pop(ADMIN_ID, None)
        if user_id:
            await context.bot.send_message(chat_id=user_id, text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{update.message.text}")
            await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    return ConversationHandler.END

# ===== Start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
        save_stats_to_github()
    first_name = update.effective_user.first_name or "–¥—Ä—É–∂–µ"
    welcome_text = f"–ü—Ä–∏–≤—ñ—Ç, {first_name}!üëã\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ –π–æ–≥–æ –∫–æ–¥, —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –º–∏ —Ç–æ–±—ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∏ —Ñ—ñ–ª—å–ºüòâ"
    await update.message.reply_text(welcome_text, reply_markup=main_keyboard(update.effective_user.id == ADMIN_ID))

# ===== Callback Handler =====
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "random_film":
        await random_film(update, context)
    elif data == "raffle":
        await raffle_start(update, context)
    elif data == "raffle_join":
        await raffle_join(update, context)
    elif data == "support":
        await support_callback(update, context)
    elif data.startswith("support_"):
        await choose_section(update, context)
    elif data.startswith("reply_"):
        await admin_reply_button(update, context)
    elif data.startswith("close_"):
        await admin_close_dialog(update, context)
    elif data == "stats":
        await show_stats(update, context)
    else:
        await update.callback_query.answer()

# ===== –¢–µ–∫—Å—Ç–æ–≤–∏–π handler =====
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if not text:
        return
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if update.effective_user.id == ADMIN_ID and ADMIN_ID in pending_replies:
        await admin_reply_message(update, context)
        return
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É
    if context.user_data.get("support_section"):
        await user_support_message(update, context)
        return
    # –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É
    await show_film(update, context, text)

# ===== MAIN =====
async def main_async():
    app = ApplicationBuilder().token(TOKEN).build()
    await app.bot.delete_webhook(drop_pending_updates=True)

    # Command
    app.add_handler(CommandHandler("start", start))
    # Callbacks
    app.add_handler(CallbackQueryHandler(callback_handler))
    # Text
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    scheduler = AsyncIOScheduler()
    scheduler.start()

    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main_async())
