import os
import json
import random
import asyncio
from datetime import datetime
from github import Github
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from deep_translator import GoogleTranslator
from difflib import get_close_matches
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ===== ENV –∑–º—ñ–Ω–Ω—ñ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_OWNER = os.getenv("GITHUB_OWNER")
GITHUB_REPO = os.getenv("GITHUB_REPO")

if not TOKEN or not ADMIN_ID or not GITHUB_TOKEN or not GITHUB_OWNER or not GITHUB_REPO:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

# ===== –§—ñ–ª—å–º–∏ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
user_stats = {}
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)

# ===== GitHub save =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, indent=2, ensure_ascii=False)
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_user(GITHUB_OWNER).get_repo(GITHUB_REPO)
        content = json.dumps(user_stats, indent=2, ensure_ascii=False)
        try:
            file = repo.get_contents(STATS_FILE)
            repo.update_file(path=STATS_FILE, message="Update stats.json", content=content, sha=file.sha)
        except:
            repo.create_file(path=STATS_FILE, message="Create stats.json", content=content)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–∞ GitHub:", e)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def main_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("üéÅ –†–æ–∑—ñ–≥—Ä–∞—à", callback_data="lottery")],
        [InlineKeyboardButton("‚úâÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all"),
            InlineKeyboardButton("üèÜ –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É", callback_data="lottery_participants")
        ])
    return InlineKeyboardMarkup(buttons)

def film_keyboard(text, is_admin=False):
    buttons = [
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all")
        ])
    return InlineKeyboardMarkup(buttons)

def support_keyboard():
    buttons = [
        [InlineKeyboardButton("–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="support_ticket")],
        [InlineKeyboardButton("–°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="support_collab")],
        [InlineKeyboardButton("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É", callback_data="support_lottery_win")]
    ]
    return InlineKeyboardMarkup(buttons)

def lottery_keyboard(user_id):
    buttons = [[InlineKeyboardButton("–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data=f"join_lottery_{user_id}")]]
    return InlineKeyboardMarkup(buttons)

# ===== –î–æ–ø–æ–º—ñ–∂–Ω–∞ =====
def get_message(update: Update):
    return update.message or update.callback_query.message

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É =====
def find_film_by_text(text):
    try:
        translated = GoogleTranslator(source='auto', target='uk').translate(text)
    except:
        translated = text

    for film in movies.values():
        if film['title'].lower() == translated.lower():
            return film

    titles = [f['title'] for f in movies.values()]
    matches = get_close_matches(translated, titles, n=1, cutoff=0.5)
    if matches:
        return next(f for f in movies.values() if f['title'] == matches[0])
    return None

# ===== –ü–æ–∫–∞–∑ —Ñ—ñ–ª—å–º—É =====
async def show_film(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    film = movies.get(code)
    if not film:
        film = find_film_by_text(code)
    message = get_message(update)
    if not film:
        await message.reply_text("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard(update.effective_user.id == ADMIN_ID))
        return
    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    # –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –∫–Ω–æ–ø–∫–∏ (—Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if update.callback_query:
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
    await message.reply_text(text, parse_mode="Markdown", reply_markup=film_keyboard(text, update.effective_user.id == ADMIN_ID))

async def random_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not movies:
        await update.callback_query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    await show_film(update, context, code)
    await update.callback_query.answer()

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    total_users = len(user_stats)
    await update.callback_query.edit_message_text(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}", reply_markup=main_keyboard(True))

# ===== –†–æ–∑—ñ–≥—Ä–∞—à =====
async def start_lottery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if "lottery" not in user_stats:
        user_stats["lottery"] = {"participants": [], "winner": None, "active": True}
    else:
        user_stats["lottery"]["active"] = True
        user_stats["lottery"]["winner"] = None
        user_stats["lottery"]["participants"] = []

    save_stats()
    # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º, —Ö—Ç–æ —â–µ –Ω–µ –±—Ä–∞–≤ —É—á–∞—Å—Ç—å
    for uid, info in user_stats.items():
        if uid == "lottery":
            continue
        if uid not in user_stats["lottery"]["participants"]:
            try:
                await context.bot.send_message(
                    int(uid),
                    "üéÅ –ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –ú–µ–≥–æ–≥–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å.",
                    reply_markup=lottery_keyboard(uid)
                )
            except:
                pass
    await update.callback_query.answer("‚úÖ –†–æ–∑—ñ–≥—Ä–∞—à —Ä–æ–∑–ø–æ—á–∞—Ç–æ!")

async def join_lottery_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(update.effective_user.id)
    if "lottery" not in user_stats:
        user_stats["lottery"] = {"participants": [], "winner": None, "active": True}
    if user_id not in user_stats["lottery"]["participants"]:
        user_stats["lottery"]["participants"].append(user_id)
        save_stats()
        await query.answer("‚úÖ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")
        await query.edit_message_text("‚úÖ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")
    else:
        await query.answer("‚ÑπÔ∏è –í–∏ –≤–∂–µ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ.")

async def lottery_participants_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    participants = user_stats.get("lottery", {}).get("participants", [])
    if not participants:
        await update.callback_query.edit_message_text("‚ùå –£—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î", reply_markup=main_keyboard(True))
        return
    text = "üéÅ –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:\n\n" + "\n".join(
        f"{user_stats[u]['first_name']} (@{user_stats[u].get('username',''))}" for u in participants
    )
    await update.callback_query.edit_message_text(text, reply_markup=main_keyboard(True))

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=support_keyboard()
    )

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": user.username, "first_name": user.first_name}
        save_stats()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}!üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ –π–æ–≥–æ –∫–æ–¥, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –º–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∏ —Ñ—ñ–ª—å–ºüòâ",
        reply_markup=main_keyboard(user.id == ADMIN_ID)
    )

async def movie_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
    save_stats()
    await show_film(update, context, code)

# ===== Main =====
async def main_async():
    app = ApplicationBuilder().token(TOKEN).build()
    scheduler = AsyncIOScheduler()
    # —Ä–æ–∑—ñ–≥—Ä–∞—à 1 —á–∏—Å–ª–∞ –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
    scheduler.add_job(lambda: asyncio.create_task(lottery_draw(app)), 'cron', day=1, hour=0, minute=0)
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, movie_by_code))
    app.add_handler(CallbackQueryHandler(random_film, pattern="^random_film$"))
    app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(start_lottery, pattern="^lottery$"))
    app.add_handler(CallbackQueryHandler(join_lottery_callback, pattern="^join_lottery_"))
    app.add_handler(CallbackQueryHandler(lottery_participants_callback, pattern="^lottery_participants$"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="^support$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    await app.run_polling()

async def lottery_draw(app):
    participants = user_stats.get("lottery", {}).get("participants", [])
    if not participants:
        return
    winner_id = random.choice(participants)
    user_stats["lottery"]["winner"] = winner_id
    user_stats["lottery"]["active"] = False
    save_stats()
    # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é
    try:
        await app.bot.send_message(int(winner_id), "üèÜ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –º—ñ—Å—è—á–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –ú–µ–≥–æ–≥–æ! –ù–∞–ø–∏—à—ñ—Ç—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–∑.")
        await app.bot.send_message(int(ADMIN_ID), f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {user_stats[winner_id]['first_name']} (@{user_stats[winner_id].get('username','')})")
    except:
        pass

def main():
    asyncio.run(main_async())

if __name__ == "__main__":
    main()
