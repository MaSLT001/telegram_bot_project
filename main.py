import os
import json
import random
import asyncio
from datetime import datetime
from github import Github
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from deep_translator import GoogleTranslator
from difflib import get_close_matches
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ===== ENV –∑–º—ñ–Ω–Ω—ñ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_OWNER = os.getenv("GITHUB_OWNER")
GITHUB_REPO = os.getenv("GITHUB_REPO")

if not TOKEN or not ADMIN_ID or not GITHUB_TOKEN or not GITHUB_OWNER or not GITHUB_REPO:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

# ===== –§—ñ–ª—å–º–∏ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
user_stats = {}
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)

GIVEAWAY_WINNER_KEY = "giveaway_winner"
GIVEAWAY_PARTICIPANT_KEY = "giveaway_participant"

# ===== GitHub save =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, indent=2, ensure_ascii=False)
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_user(GITHUB_OWNER).get_repo(GITHUB_REPO)
        content = json.dumps(user_stats, indent=2, ensure_ascii=False)
        try:
            file = repo.get_contents(STATS_FILE)
            repo.update_file(path=STATS_FILE, message="Update stats.json", content=content, sha=file.sha)
        except:
            repo.create_file(path=STATS_FILE, message="Create stats.json", content=content)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–∞ GitHub:", e)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def main_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("üéÅ –†–æ–∑—ñ–≥—Ä–∞—à", callback_data="giveaway")],
        [InlineKeyboardButton("‚úâÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üìã –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É", callback_data="giveaway_participants"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all")
        ])
    return InlineKeyboardMarkup(buttons)

def film_keyboard(text, is_admin=False):
    buttons = [
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all")
        ])
    return InlineKeyboardMarkup(buttons)

# ===== –î–æ–ø–æ–º—ñ–∂–Ω–∞ =====
def get_message(update: Update):
    return update.message or update.callback_query.message

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É =====
def find_film_by_text(text):
    try:
        translated = GoogleTranslator(source='auto', target='uk').translate(text)
    except:
        translated = text
    for film in movies.values():
        if film['title'].lower() == translated.lower():
            return film
    titles = [f['title'] for f in movies.values()]
    matches = get_close_matches(translated, titles, n=1, cutoff=0.5)
    if matches:
        return next(f for f in movies.values() if f['title'] == matches[0])
    return None

# ===== –ü–æ–∫–∞–∑ —Ñ—ñ–ª—å–º—É =====
last_film_message_id = None

async def show_film(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    global last_film_message_id
    film = movies.get(code) or find_film_by_text(code)
    message = get_message(update)
    if not film:
        await message.reply_text("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard(update.effective_user.id == ADMIN_ID))
        return
    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    sent = await message.reply_text(text, parse_mode="Markdown", reply_markup=film_keyboard(text, update.effective_user.id == ADMIN_ID))
    # –≤–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ
    if last_film_message_id and last_film_message_id != sent.message_id:
        try:
            await context.bot.edit_message_reply_markup(chat_id=message.chat_id, message_id=last_film_message_id, reply_markup=None)
        except:
            pass
    last_film_message_id = sent.message_id

async def random_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not movies:
        await update.callback_query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    await show_film(update, context, code)
    await update.callback_query.answer()

# ===== –†–æ–∑—ñ–≥—Ä–∞—à =====
async def giveaway_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
    user_stats[uid][GIVEAWAY_PARTICIPANT_KEY] = True
    save_stats()
    await update.callback_query.answer("‚úÖ –í–∏ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ")
    await update.callback_query.message.reply_text("üéÅ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!")

async def show_giveaway_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    participants = [u for u in user_stats if user_stats[u].get(GIVEAWAY_PARTICIPANT_KEY)]
    if not participants:
        text = "‚ùå –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É"
    else:
        text = "üéÅ –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:\n\n" + "\n".join([
            f"{user_stats[u]['first_name']} (@{user_stats[u].get('username',''))}" for u in participants
        ])
    await update.callback_query.edit_message_text(text, reply_markup=main_keyboard(True))

def select_giveaway_winner(context: ContextTypes.DEFAULT_TYPE):
    participants = [u for u in user_stats if user_stats[u].get(GIVEAWAY_PARTICIPANT_KEY)]
    if not participants:
        return
    winner_uid = random.choice(participants)
    for u in user_stats:
        user_stats[u][GIVEAWAY_WINNER_KEY] = (u == winner_uid)
    save_stats()
    # –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é
    asyncio.create_task(context.bot.send_message(
        int(winner_uid),
        "üèÜ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –º—ñ—Å—è—á–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ MEGOGO. –ù–∞–ø–∏—à—ñ—Ç—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–∑."
    ))
    asyncio.create_task(context.bot.send_message(
        ADMIN_ID,
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {user_stats[winner_uid]['first_name']} (@{user_stats[winner_uid].get('username')})"
    ))

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['support'] = True
    await update.callback_query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úâÔ∏è –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="support_ticket")],
        [InlineKeyboardButton("ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="support_collab")],
        [InlineKeyboardButton("üèÜ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É", callback_data="support_win")],
    ])
    await update.callback_query.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:", reply_markup=keyboard
    )

async def handle_support_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    uid = str(query.from_user.id)
    if query.data == "support_ticket":
        context.user_data['support_type'] = "ticket"
        await query.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:")
    elif query.data == "support_collab":
        context.user_data['support_type'] = "collab"
        await query.message.reply_text("ü§ù –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:")
    elif query.data == "support_win":
        if user_stats.get(uid, {}).get(GIVEAWAY_WINNER_KEY):
            context.user_data['support_type'] = "win"
            await query.message.reply_text("üèÜ –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏! –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∑—É.")
        else:
            await query.message.reply_text("‚ùå –í–∏ –Ω–µ —î –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É.")
    await query.answer()

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if 'support_type' not in context.user_data:
        return
    text = update.message.text
    support_type = context.user_data.pop('support_type')
    if support_type == "win":
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ. –ê–¥–º—ñ–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –π–æ–≥–æ.")
        await context.bot.send_message(
            ADMIN_ID,
            f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å {user_stats[uid]['first_name']} (@{user_stats[uid].get('username')}) –∑–≤–µ—Ä–Ω—É–≤—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∑—É:\n\n{text}"
        )
    else:
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
        await context.bot.send_message(
            ADMIN_ID,
            f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {update.effective_user.first_name} (@{update.effective_user.username}) [{support_type}]:\n\n{text}"
        )

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": user.username, "first_name": user.first_name}
        save_stats()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}!üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ –π–æ–≥–æ –∫–æ–¥, —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –º–∏ —Ç–æ–±—ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∏ —Ñ—ñ–ª—å–ºüòâ",
        reply_markup=main_keyboard(user.id == ADMIN_ID)
    )
    # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à —Ç–∏–º, —Ö—Ç–æ —â–µ –Ω–µ –±—Ä–∞–≤ —É—á–∞—Å—Ç—å
    if not user_stats[uid].get(GIVEAWAY_PARTICIPANT_KEY):
        await update.message.reply_text(
            "üéÅ –†–æ–∑—ñ–≥—Ä–∞—à –º—ñ—Å—è—á–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ MEGOGO! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üéÅ –†–æ–∑—ñ–≥—Ä–∞—à', —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å."
        )

async def movie_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
    save_stats()
    if context.user_data.get('support_type'):
        await handle_support_message(update, context)
        return
    await show_film(update, context, update.message.text.strip())

# ===== Main =====
async def main_async():
    app = ApplicationBuilder().token(TOKEN).build()

    # Command and message handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, movie_by_code))
    app.add_handler(CallbackQueryHandler(random_film, pattern="^random_film$"))
    app.add_handler(CallbackQueryHandler(giveaway_callback, pattern="^giveaway$"))
    app.add_handler(CallbackQueryHandler(show_giveaway_participants, pattern="^giveaway_participants$"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="^support$"))
    app.add_handler(CallbackQueryHandler(handle_support_options, pattern="^support_"))
    
    # Scheduler
    scheduler = AsyncIOScheduler()
    scheduler.add_job(select_giveaway_winner, "cron", day=1, hour=0, minute=0, args=[app])
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    await app.run_polling()

def main():
    asyncio.run(main_async())

if __name__ == "__main__":
    main()
