import os
import json
import random
from github import Github
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from deep_translator import GoogleTranslator
from difflib import get_close_matches
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import nest_asyncio

# ===== FIX –¥–ª—è Render/Jupyter =====
nest_asyncio.apply()

# ===== ENV –∑–º—ñ–Ω–Ω—ñ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_OWNER = os.getenv("GITHUB_OWNER")
GITHUB_REPO = os.getenv("GITHUB_REPO")

if not TOKEN or not ADMIN_ID or not GITHUB_TOKEN or not GITHUB_OWNER or not GITHUB_REPO:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

# ===== –§—ñ–ª—å–º–∏ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
user_stats = {}
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)

# ===== GitHub save =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, indent=2, ensure_ascii=False)
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_user(GITHUB_OWNER).get_repo(GITHUB_REPO)
        content = json.dumps(user_stats, indent=2, ensure_ascii=False)
        try:
            file = repo.get_contents(STATS_FILE)
            repo.update_file(path=STATS_FILE, message="Update stats.json", content=content, sha=file.sha)
        except:
            repo.create_file(path=STATS_FILE, message="Create stats.json", content=content)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–∞ GitHub:", e)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def main_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("üéÅ –†–æ–∑—ñ–≥—Ä–∞—à", callback_data="giveaway")],
        [InlineKeyboardButton("‚úâÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all")
        ])
        buttons.append([
            InlineKeyboardButton("üéÅ –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É", callback_data="giveaway_participants")
        ])
    return InlineKeyboardMarkup(buttons)

def film_keyboard(text, is_admin=False):
    buttons = [
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ]
    if is_admin:
        buttons.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üì¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="send_all")
        ])
    return InlineKeyboardMarkup(buttons)

# ===== –î–æ–ø–æ–º—ñ–∂–Ω–∞ =====
def get_message(update: Update):
    return update.message or update.callback_query.message

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É =====
def find_film_by_text(text):
    try:
        translated = GoogleTranslator(source='auto', target='uk').translate(text)
    except:
        translated = text
    for film in movies.values():
        if film['title'].lower() == translated.lower():
            return film
    titles = [f['title'] for f in movies.values()]
    matches = get_close_matches(translated, titles, n=1, cutoff=0.5)
    if matches:
        return next(f for f in movies.values() if f['title'] == matches[0])
    return None

# ===== –ü–æ–∫–∞–∑ —Ñ—ñ–ª—å–º—É =====
async def show_film(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    film = movies.get(code) or find_film_by_text(code)
    message = get_message(update)
    if not film:
        await message.reply_text("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard(update.effective_user.id == ADMIN_ID))
        return

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    last_msg_id = context.user_data.get('last_film_message')
    if last_msg_id:
        try:
            await context.bot.edit_message_reply_markup(
                chat_id=message.chat_id,
                message_id=last_msg_id,
                reply_markup=None
            )
        except:
            pass

    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    sent_message = await message.reply_text(text, parse_mode="Markdown", reply_markup=film_keyboard(text, update.effective_user.id == ADMIN_ID))
    context.user_data['last_film_message'] = sent_message.message_id

async def random_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not movies:
        await update.callback_query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    await show_film(update, context, code)
    await update.callback_query.answer()

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    total_users = len(user_stats)
    await update.callback_query.edit_message_text(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}", reply_markup=main_keyboard(True))

# ===== –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º =====
async def send_all_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    await update.callback_query.edit_message_text("‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
    context.user_data['send_all'] = True

async def handle_send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('send_all') and 'pending_text' not in context.user_data:
        context.user_data['pending_text'] = update.message.text
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="confirm_send_all"),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_send_all")
            ]
        ])
        await update.message.reply_text(f"‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º?\n\n{update.message.text}", reply_markup=keyboard)
        context.user_data['send_all'] = False

async def confirm_send_all_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    text = context.user_data.pop('pending_text', None)
    if text:
        for uid in user_stats:
            try:
                await context.bot.send_message(int(uid), text)
            except:
                pass
        await update.callback_query.edit_message_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", reply_markup=main_keyboard(True))
    else:
        await update.callback_query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏", reply_markup=main_keyboard(True))

async def cancel_send_all_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
    context.user_data.pop('pending_text', None)
    await update.callback_query.edit_message_text("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞", reply_markup=main_keyboard(True))

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("1Ô∏è‚É£ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="support_request")],
        [InlineKeyboardButton("2Ô∏è‚É£ –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="support_collab")],
        [InlineKeyboardButton("3Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ", callback_data="support_giveaway")],
    ])
    await update.callback_query.message.reply_text("‚úâÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", reply_markup=keyboard)

# ===== –†–æ–∑—ñ–≥—Ä–∞—à =====
GIVEAWAY_KEY = "giveaway"

async def join_giveaway_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
    user_stats[uid][GIVEAWAY_KEY] = True
    save_stats()
    await update.callback_query.answer("üéÅ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!", show_alert=True)
    await update.callback_query.edit_message_text("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!")

async def giveaway_participants_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    participants = [u for u, v in user_stats.items() if v.get(GIVEAWAY_KEY)]
    text = "üéÅ –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:\n\n" + "\n".join([f"{user_stats[u]['first_name']} (@{user_stats[u].get('username','')})" for u in participants])
    await update.callback_query.edit_message_text(text, reply_markup=main_keyboard(True))

async def run_giveaway(bot):
    participants = [uid for uid, data in user_stats.items() if data.get(GIVEAWAY_KEY)]
    if not participants:
        print("‚ùå –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É")
        return
    winner_id = random.choice(participants)
    winner_data = user_stats[winner_id]

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é
    try:
        await bot.send_message(int(winner_id), f"üéâ –í—ñ—Ç–∞—î–º–æ {winner_data['first_name']}! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –º—ñ—Å—è—á–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ Megogo! –ù–∞–ø–∏—à—ñ—Ç—å –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∑—É.")
    except:
        pass

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    try:
        await bot.send_message(ADMIN_ID, f"üéâ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {winner_data['first_name']} (@{winner_data.get('username','')}) –≤–∏–≥—Ä–∞–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à!")
    except:
        pass

    # –°–∫–∏–¥–∞—î–º–æ —É—á–∞—Å—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –º—ñ—Å—è—Ü—è
    for uid in user_stats:
        user_stats[uid][GIVEAWAY_KEY] = False
    save_stats()

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º, —Ö—Ç–æ —â–µ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    for uid, data in user_stats.items():
        if not data.get(GIVEAWAY_KEY):
            try:
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üéÅ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="giveaway")]])
                await bot.send_message(int(uid), "üéÅ –ù–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –ø–æ—á–∞–≤—Å—è! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å.", reply_markup=keyboard)
            except:
                pass

async def giveaway_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await join_giveaway_callback(update, context)

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": user.username, "first_name": user.first_name, GIVEAWAY_KEY: False}
        save_stats()

    keyboard = main_keyboard(user.id == ADMIN_ID)
    if not user_stats[uid].get(GIVEAWAY_KEY):
        giveaway_button = InlineKeyboardMarkup([[InlineKeyboardButton("üéÅ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ", callback_data="giveaway")]])
        await update.message.reply_text(
            f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ –π–æ–≥–æ –∫–æ–¥, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üòâ",
            reply_markup=giveaway_button
        )

    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ –π–æ–≥–æ –∫–æ–¥, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üòâ",
        reply_markup=keyboard
    )

async def movie_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    uid = str(update.effective_user.id)
    if uid not in user_stats:
        user_stats[uid] = {"username": update.effective_user.username, "first_name": update.effective_user.first_name}
    save_stats()
    await show_film(update, context, code)

# ===== Main =====
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, movie_by_code))
    app.add_handler(CallbackQueryHandler(random_film, pattern="^random_film$"))
    app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(send_all_message, pattern="^send_all$"))
    app.add_handler(CallbackQueryHandler(confirm_send_all_callback, pattern="^confirm_send_all$"))
    app.add_handler(CallbackQueryHandler(cancel_send_all_callback, pattern="^cancel_send_all$"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="^support$"))
    app.add_handler(CallbackQueryHandler(giveaway_callback, pattern="^giveaway$"))
    app.add_handler(CallbackQueryHandler(giveaway_participants_callback, pattern="^giveaway_participants$"))

    # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è —â–æ–º—ñ—Å—è—á–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    scheduler = AsyncIOScheduler()
    scheduler.add_job(run_giveaway, "cron", day=1, hour=12, minute=0, args=[app.bot])
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    app.run_polling()  # –∑–∞–ø—É—Å–∫–∞—î event loop —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ

if __name__ == "__main__":
    main()

