import os
import json
import requests
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, CallbackQueryHandler, Filters

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# ===== –†–µ–∞–∫—Ü—ñ—ó =====
REACTIONS_FILE = "reactions.json"
if os.path.exists(REACTIONS_FILE):
    with open(REACTIONS_FILE, "r", encoding="utf-8") as f:
        reactions = json.load(f)
else:
    reactions = {}  # {movie_code: {reaction_type: [user_id, ...]}}

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
APP_URL = os.getenv("APP_URL")

if not TOKEN or not ADMIN_ID or not APP_URL:
    raise ValueError("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ BOT_TOKEN, ADMIN_ID —Ç–∞ APP_URL —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

ADMIN_ID = int(ADMIN_ID)

# ===== –ë–æ—Ç —ñ Flask =====
bot = Bot(token=TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot, None, workers=0)

support_mode_users = set()
reply_mode_admin = {}

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)

def save_reactions():
    with open(REACTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(reactions, f, ensure_ascii=False, indent=4)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def get_film_keyboard(share_text, movie_code):
    movie_reacts = reactions.get(movie_code, {})
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=share_text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [
            InlineKeyboardButton(f"üëç {len(movie_reacts.get('like', []))}", callback_data=f"react_{movie_code}_like"),
            InlineKeyboardButton(f"üëé {len(movie_reacts.get('dislike', []))}", callback_data=f"react_{movie_code}_dislike"),
            InlineKeyboardButton(f"üòÇ {len(movie_reacts.get('laugh', []))}", callback_data=f"react_{movie_code}_laugh"),
            InlineKeyboardButton(f"‚ù§Ô∏è {len(movie_reacts.get('heart', []))}", callback_data=f"react_{movie_code}_heart"),
            InlineKeyboardButton(f"üí© {len(movie_reacts.get('poop', []))}", callback_data=f"react_{movie_code}_poop")
        ]
    ])

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
def start(update, context):
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.username or update.effective_user.full_name
    user_stats[user_id] = {"name": user_name, "visits": user_stats.get(user_id, {}).get("visits", 0) + 1}
    save_stats()
    update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.")

def find_movie(update, context):
    code = update.message.text.strip()
    if code in movies:
        film = movies[code]
        text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
        update.message.reply_text(text, parse_mode="Markdown",
                                  reply_markup=get_film_keyboard(share_text=text, movie_code=code))
    else:
        update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def handle_support_message(update, context):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    text = update.message.text

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
    if user_id == ADMIN_ID and user_id in reply_mode_admin:
        target_user_id = reply_mode_admin[user_id]
        try:
            bot.send_message(chat_id=target_user_id, text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{text}")
            update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        except:
            update.message.reply_text("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        return

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É
    if user_id in support_mode_users:
        bot.send_message(chat_id=ADMIN_ID,
            text=f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\nüë§ {username} (ID: {user_id})\n\nüí¨ {text}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úè –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]]))
        update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
        support_mode_users.remove(user_id)
    else:
        find_movie(update, context)

def support_callback(update, context):
    user_id = update.callback_query.from_user.id
    support_mode_users.add(user_id)
    update.callback_query.answer()
    update.callback_query.message.reply_text("‚úç –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ.")

def reply_callback(update, context):
    query = update.callback_query
    data = query.data
    if data.startswith("reply_"):
        target_user_id = int(data.split("_")[1])
        reply_mode_admin[ADMIN_ID] = target_user_id
        query.answer()
        query.message.reply_text(f"‚úç –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (ID: {target_user_id}).\n"
                                 f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /stopreply —â–æ–± –≤–∏–π—Ç–∏.")

def stop_reply(update, context):
    if update.effective_user.id == ADMIN_ID and ADMIN_ID in reply_mode_admin:
        del reply_mode_admin[ADMIN_ID]
        update.message.reply_text("üö™ –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
    else:
        update.message.reply_text("‚ö† –í–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

def reaction_callback(update, context):
    query = update.callback_query
    _, movie_code, reaction_type = query.data.split("_")
    user_id = query.from_user.id

    if movie_code not in reactions:
        reactions[movie_code] = {"like": [], "dislike": [], "laugh": [], "heart": [], "poop": []}

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≥–æ–ª–æ—Å–∏
    for key in reactions[movie_code]:
        if user_id in reactions[movie_code][key] and key != reaction_type:
            reactions[movie_code][key].remove(user_id)

    if user_id not in reactions[movie_code][reaction_type]:
        reactions[movie_code][reaction_type].append(user_id)
        save_reactions()

    share_text = f"üé¨ {movies[movie_code]['title']} - –ü–æ–¥—ñ–ª–∏—Å—è!"
    query.message.edit_reply_markup(reply_markup=get_film_keyboard(share_text, movie_code))
    query.answer(f"–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ {reaction_type}")

# ===== –í–µ–±—Ö—É–∫ =====
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "Bot is running!"

# ===== –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ =====
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("stopreply", stop_reply))
dispatcher.add_handler(CallbackQueryHandler(support_callback, pattern="^support$"))
dispatcher.add_handler(CallbackQueryHandler(reply_callback, pattern="^reply_"))
dispatcher.add_handler(CallbackQueryHandler(reaction_callback, pattern="^react_"))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_support_message))

# ===== –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ =====
def set_or_check_webhook():
    WEBHOOK_URL = f"{APP_URL}/{TOKEN}"
    try:
        info = requests.get(f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo").json()
        current_url = info.get("result", {}).get("url", "")
        if current_url != WEBHOOK_URL:
            resp = requests.get(f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={WEBHOOK_URL}")
            if resp.status_code == 200:
                print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π!")
            else:
                print(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤–µ–±—Ö—É–∫–∞: {resp.text}")
        else:
            print("‚Ñπ –í–µ–±—Ö—É–∫ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —ñ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π.")
    except Exception as e:
        print(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤–µ–±—Ö—É–∫–∞: {e}")

if __name__ == "__main__":
    print("BOT_TOKEN set:", TOKEN is not None)
    print("ADMIN_ID:", ADMIN_ID)
    print("APP_URL set:", APP_URL)
    set_or_check_webhook()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
