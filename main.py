import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ =====
STATS_FILE = "stats.json"
if os.path.exists(STATS_FILE):
    try:
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            user_stats = json.load(f)
    except json.JSONDecodeError:
        user_stats = {}
else:
    user_stats = {}

# ===== –†–µ–∞–∫—Ü—ñ—ó =====
REACTIONS_FILE = "reactions.json"
if os.path.exists(REACTIONS_FILE):
    try:
        with open(REACTIONS_FILE, "r", encoding="utf-8") as f:
            reactions = json.load(f)
    except json.JSONDecodeError:
        reactions = {}
else:
    reactions = {}  # {movie_code: {reaction_type: [user_id, ...]}}

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ Environment Variables =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
if not TOKEN or not ADMIN_ID:
    raise ValueError("BOT_TOKEN –∞–±–æ ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ environment variables.")

# ===== –°—Ç–∞–Ω –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ =====
support_mode_users = set()
reply_mode_admin = {}  # {admin_id: user_id_to_reply}

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ])

def get_film_keyboard(share_text, movie_code):
    movie_reacts = reactions.get(movie_code, {})
    # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤
    for key in ["like", "dislike", "laugh", "heart", "poop"]:
        movie_reacts.setdefault(key, [])
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=share_text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [
            InlineKeyboardButton(f"üëç {len(movie_reacts['like'])}", callback_data=f"react_{movie_code}_like"),
            InlineKeyboardButton(f"üëé {len(movie_reacts['dislike'])}", callback_data=f"react_{movie_code}_dislike"),
            InlineKeyboardButton(f"üòÇ {len(movie_reacts['laugh'])}", callback_data=f"react_{movie_code}_laugh"),
            InlineKeyboardButton(f"‚ù§Ô∏è {len(movie_reacts['heart'])}", callback_data=f"react_{movie_code}_heart"),
            InlineKeyboardButton(f"üí© {len(movie_reacts['poop'])}", callback_data=f"react_{movie_code}_poop"),
        ]
    ])

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)

def save_reactions():
    with open(REACTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(reactions, f, ensure_ascii=False, indent=4)

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.username or update.effective_user.full_name

    user_stats[user_id] = {
        "name": user_name,
        "visits": user_stats.get(user_id, {}).get("visits", 0) + 1
    }
    save_stats()

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ú–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –∞–±–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É.",
        reply_markup=get_main_keyboard()
    )

# ===== –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º =====
async def random_film_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not movies:
        await query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    film = movies[code]
    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    await query.message.reply_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_film_keyboard(text, code)
    )
    await query.answer()

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É –ø–æ –∫–æ–¥—É (–∑–≤–∏—á–∞–π–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) =====
async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if code in movies:
        film = movies[code]
        text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
        await update.message.reply_text(
            text, parse_mode="Markdown", reply_markup=get_film_keyboard(text, code)
        )
    else:
        await update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    support_mode_users.add(user_id)
    await query.answer()
    await query.message.reply_text("‚úç –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ.")

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    text = update.message.text

    # –Ø–∫—â–æ –∞–¥–º—ñ–Ω —É —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî –≤—ñ–¥—Å–∏–ª–∞—î–º–æ –π–æ–≥–æ —Ç–µ–∫—Å—Ç –∞–¥—Ä–µ—Å–∞—Ç—É
    if user_id == ADMIN_ID and user_id in reply_mode_admin:
        target_user_id = reply_mode_admin[user_id]
        try:
            await context.bot.send_message(chat_id=target_user_id, text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{text}")
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        except Exception:
            await update.message.reply_text("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É
    if user_id in support_mode_users:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\nüë§ {username} (ID: {user_id})\n\nüí¨ {text}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úè –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]
            ])
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
        support_mode_users.remove(user_id)
    else:
        # –Ø–∫—â–æ —Ü–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º –ø–æ –∫–æ–¥—É
        await find_movie(update, context)

async def reply_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data.startswith("reply_"):
        target_user_id = int(data.split("_")[1])
        reply_mode_admin[ADMIN_ID] = target_user_id
        await query.answer()
        await query.message.reply_text(
            f"‚úç –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (ID: {target_user_id}).\n"
            f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /stopreply —â–æ–± –≤–∏–π—Ç–∏."
        )

async def stop_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID and ADMIN_ID in reply_mode_admin:
        del reply_mode_admin[ADMIN_ID]
        await update.message.reply_text("üö™ –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
    else:
        await update.message.reply_text("‚ö† –í–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

# ===== –†–µ–∞–∫—Ü—ñ—ó =====
async def reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, movie_code, reaction_type = query.data.split("_")
    user_id = query.from_user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ñ—ñ–ª—å–º—É
    if movie_code not in reactions:
        reactions[movie_code] = {"like": [], "dislike": [], "laugh": [], "heart": [], "poop": []}

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω—à—ñ —Ä–µ–∞–∫—Ü—ñ—ó —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ñ—ñ–ª—å–º—É
    for key in reactions[movie_code]:
        if key != reaction_type and user_id in reactions[movie_code][key]:
            reactions[movie_code][key].remove(user_id)

    # –¢–æ–≥–ª –æ–±—Ä–∞–Ω–æ—ó —Ä–µ–∞–∫—Ü—ñ—ó (–ø–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è ‚Äî –∑–Ω—ñ–º–∞—î —Ä–µ–∞–∫—Ü—ñ—é)
    if user_id not in reactions[movie_code][reaction_type]:
        reactions[movie_code][reaction_type].append(user_id)
    else:
        reactions[movie_code][reaction_type].remove(user_id)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ó–ê–í–ñ–î–ò –ø—ñ—Å–ª—è –±—É–¥—å-—è–∫–æ—ó –∑–º—ñ–Ω–∏
    save_reactions()

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏
    movie_reacts = reactions[movie_code]
    share_text = f"üé¨ {movies[movie_code]['title']}\n\n{movies[movie_code]['desc']}\n\nüîó {movies[movie_code]['link']}"
    await query.message.edit_reply_markup(
        reply_markup=get_film_keyboard(share_text, movie_code)
    )

    await query.answer("‚úÖ –†–µ–∞–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")


# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ =====
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    total_users = len(user_stats)
    total_visits = sum(u.get("visits", 0) for u in user_stats.values())

    user_list = "\n".join(
        f"üë§ {u.get('name', 'Unknown')} (ID: {uid}) ‚Äî {u.get('visits', 0)} –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å"
        for uid, u in user_stats.items()
    )

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n" \
           f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n" \
           f"üìà –í—Å—å–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {total_visits}\n\n" \
           f"{user_list}"

    await update.message.reply_text(text)


# ===== –†–æ–∑—Å–∏–ª–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º =====
async def sendall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /sendall <—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")
        return

    message_text = " ".join(context.args)
    sent_count, failed_count = 0, 0

    for uid in user_stats.keys():
        try:
            await context.bot.send_message(chat_id=int(uid), text=message_text)
            sent_count += 1
        except Exception:
            failed_count += 1

    await update.message.reply_text(
        f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent_count}\n"
        f"‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è: {failed_count}"
    )


# ===== –ì–æ–ª–æ–≤–Ω–∞ =====
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("sendall", sendall_command))
    app.add_handler(CommandHandler("stopreply", stop_reply))

    # Callback-–∏
    app.add_handler(CallbackQueryHandler(random_film_callback, pattern="random_film"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="support"))
    app.add_handler(CallbackQueryHandler(reply_callback, pattern="reply_"))
    app.add_handler(CallbackQueryHandler(reaction_callback, pattern="react_"))

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

