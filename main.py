import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# ===== –†–µ–∞–∫—Ü—ñ—ó =====
REACTIONS_FILE = "reactions.json"
if os.path.exists(REACTIONS_FILE):
    with open(REACTIONS_FILE, "r", encoding="utf-8") as f:
        reactions = json.load(f)
else:
    reactions = {}

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ Environment Variables =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables.")
if not ADMIN_ID:
    raise ValueError("ADMIN_ID is not set in environment variables.")

ADMIN_ID = int(ADMIN_ID)

support_mode_users = set()
reply_mode_admin = {}

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film"),
            InlineKeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É", callback_data="enter_code")
        ]
    ])

def get_film_keyboard(share_text, movie_code):
    movie_reacts = reactions.get(movie_code, {})
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=share_text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [
            InlineKeyboardButton(f"üëç {len(movie_reacts.get('like', []))}", callback_data=f"react_{movie_code}_like"),
            InlineKeyboardButton(f"üëé {len(movie_reacts.get('dislike', []))}", callback_data=f"react_{movie_code}_dislike"),
            InlineKeyboardButton(f"üòÇ {len(movie_reacts.get('laugh', []))}", callback_data=f"react_{movie_code}_laugh"),
            InlineKeyboardButton(f"‚ù§Ô∏è {len(movie_reacts.get('heart', []))}", callback_data=f"react_{movie_code}_heart"),
            InlineKeyboardButton(f"üí© {len(movie_reacts.get('poop', []))}", callback_data=f"react_{movie_code}_poop")
        ]
    ])

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.username or update.effective_user.full_name

    user_stats[user_id] = {
        "name": user_name,
        "visits": user_stats.get(user_id, {}).get("visits", 0) + 1
    }
    save_stats()

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ú–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –∞–±–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É.",
        reply_markup=get_main_keyboard()
    )

# ===== –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º =====
async def random_film_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not movies:
        await query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    film = movies[code]
    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    await query.message.reply_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_film_keyboard(share_text=text, movie_code=code)
    )
    await query.answer()

# ===== –í–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É =====
async def enter_code_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É:")
    await query.answer()

async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if code in movies:
        film = movies[code]
        text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
        await update.message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_film_keyboard(share_text=text, movie_code=code)
        )
    else:
        await update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    support_mode_users.add(user_id)
    await query.answer()
    await query.message.reply_text("‚úç –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ.")

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    text = update.message.text

    if user_id == ADMIN_ID and ADMIN_ID in reply_mode_admin:
        target_user_id = reply_mode_admin[ADMIN_ID]
        try:
            await context.bot.send_message(chat_id=target_user_id, text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{text}")
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        except:
            await update.message.reply_text("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        return

    if user_id in support_mode_users:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\nüë§ {username} (ID: {user_id})\n\nüí¨ {text}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úè –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]])
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
        support_mode_users.remove(user_id)
    else:
        await find_movie(update, context)

# ===== –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (reply, stopreply, —Ä–µ–∞–∫—Ü—ñ—ó, stats, broadcast) =====
# –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω, –ª–∏—à–µ –∞–¥–∞–ø—Ç—É—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–æ ContextTypes

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)

def save_reactions():
    with open(REACTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(reactions, f, ensure_ascii=False, indent=4)

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
if __name__ == "__main__":
    bot = Bot(token=TOKEN)
    try:
        bot.delete_webhook()
        print("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ polling.")
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("sendall", send_all))
    app.add_handler(CommandHandler("stopreply", stop_reply))
    app.add_handler(CommandHandler("stats", send_stats))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="^support$"))
    app.add_handler(CallbackQueryHandler(reply_callback, pattern="^reply_"))
    app.add_handler(CallbackQueryHandler(reaction_callback, pattern="^react_"))
    app.add_handler(CallbackQueryHandler(random_film_callback, pattern="^random_film$"))
    app.add_handler(CallbackQueryHandler(enter_code_callback, pattern="^enter_code$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()
