from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import json
import os
import re
import logging

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–∏ —Ñ—ñ–ª—å–º—ñ–≤ ---
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
    logging.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(movies)} —Ñ—ñ–ª—å–º—ñ–≤ —ñ–∑ movies.json")
except FileNotFoundError:
    logging.warning("‚ö†Ô∏è –§–∞–π–ª movies.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–æ—Ä–æ–∂–Ω—é –±–∞–∑—É")
    movies = {}
except json.JSONDecodeError as e:
    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ movies.json: {e}")
    movies = {}

# --- –§–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
STATS_FILE = "stats.json"

if os.path.exists(STATS_FILE):
    try:
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            user_stats = json.load(f)
        logging.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É {len(user_stats)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    except json.JSONDecodeError as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ stats.json: {e}")
        user_stats = {}
else:
    user_stats = {}
    logging.info("üìÇ –§–∞–π–ª stats.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ")

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7572398720:AAEJgReqQ3ARPFZFhwlYMaH9E_DK4Y1Lx6E")
ADMIN_ID = int(os.getenv("ADMIN_ID", "381038534"))

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)
    logging.debug("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞")

def escape_markdown(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ –¥–ª—è MarkdownV2"""
    escape_chars = r"_*[]()~`>#+-=|{}.!/"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.username or update.effective_user.full_name

    if user_id not in user_stats:
        user_stats[user_id] = {"name": user_name, "visits": 1}
    else:
        user_stats[user_id]["visits"] += 1

    save_stats()

    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º–∞, —ñ —è —Å–∫–∞–∂—É, —â–æ —Ü–µ –∑–∞ —Ñ—ñ–ª—å–º.")

async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not movies:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    if code in movies:
        film = movies[code]
        title = escape_markdown(film.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏"))
        desc = escape_markdown(film.get("desc", ""))
        link = escape_markdown(film.get("link", ""))
        text = f"üé¨ *{title}*\n\n{desc}\n\nüîó {link}"
        await update.message.reply_text(text, parse_mode="MarkdownV2")
    else:
        await update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def broadcast(context: ContextTypes.DEFAULT_TYPE, text: str):
    for user_id in user_stats.keys():
        try:
            await context.bot.send_message(chat_id=int(user_id), text=text)
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /sendall —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    text = " ".join(context.args)
    await broadcast(context, text)
    await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    try:
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("sendall", send_all))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, find_movie))

        app.run_polling()
    except Exception as e:
        logging.critical(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
