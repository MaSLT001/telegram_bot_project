import os
import json
import random
import asyncio
from github import Github
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from deep_translator import GoogleTranslator
from difflib import get_close_matches
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ===== ENV –∑–º—ñ–Ω–Ω—ñ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_OWNER = os.getenv("GITHUB_OWNER")
GITHUB_REPO = os.getenv("GITHUB_REPO")

for var in [TOKEN, ADMIN_ID, GITHUB_TOKEN, GITHUB_OWNER, GITHUB_REPO]:
    if not var:
        raise ValueError("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

# ===== –§—ñ–ª—å–º–∏ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
SUPPORT_FILE = "support.json"
if os.path.exists(SUPPORT_FILE):
    with open(SUPPORT_FILE, "r", encoding="utf-8") as f:
        support_requests = json.load(f)
else:
    support_requests = {}

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====
def save_user_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, indent=2, ensure_ascii=False)
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_user(GITHUB_OWNER).get_repo(GITHUB_REPO)
        content = json.dumps(user_stats, indent=2, ensure_ascii=False)
        try:
            file = repo.get_contents(STATS_FILE)
            repo.update_file(STATS_FILE, "Update stats.json", content, file.sha)
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ GitHub")
        except Exception:
            repo.create_file(STATS_FILE, "Create stats.json", content)
            print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª stats.json –Ω–∞ GitHub")
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ GitHub:", e)

# ===== –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ =====
def update_user_stats(user):
    user_id = str(user.id)
    if user_id not in user_stats:
        user_stats[user_id] = {
            "username": user.username or "–Ω–µ–º–∞—î",
            "first_name": user.first_name or "–Ω–µ–º–∞—î",
            "raffle": False
        }
    save_user_stats()  # ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ—Å–ª—è –±—É–¥—å-—è–∫–æ—ó –∑–º—ñ–Ω–∏

# ===== –†–æ–∑—ñ–≥—Ä–∞—à –∞–∫—Ç–∏–≤–Ω–∏–π? =====
def is_raffle_active():
    return any(u.get("raffle") for u in user_stats.values())

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def main_keyboard(is_admin=False):
    raffle_text = "üéÅ –†–æ–∑—ñ–≥—Ä–∞—à MEGOGO"
    if is_raffle_active():
        raffle_text += " (–∞–∫—Ç–∏–≤–Ω–∏–π)"
    buttons = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton(raffle_text, callback_data="raffle")],
        [InlineKeyboardButton("‚úâÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")])
        buttons.append([InlineKeyboardButton("üë• –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É", callback_data="raffle_participants")])
        buttons.append([InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="broadcast")])
    return InlineKeyboardMarkup(buttons)

def film_keyboard(film_title, is_admin=False):
    buttons = [
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=film_title),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")])
    return InlineKeyboardMarkup(buttons)

def support_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úâÔ∏è –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="support_zvernennya")],
        [InlineKeyboardButton("ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="support_spivpratsya")],
        [InlineKeyboardButton("üèÜ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É", callback_data="support_peremoga")]
    ])

def admin_reply_keyboard(user_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]
    ])

def winner_keyboard():
    return support_keyboard()

# ===== –î–æ–ø–æ–º—ñ–∂–Ω–∞ =====
def get_message(update: Update):
    return update.message or update.callback_query.message

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É =====
def find_film_by_text(text):
    if text in movies:
        return movies[text]
    try:
        translated = GoogleTranslator(source='auto', target='uk').translate(text)
    except:
        translated = text
    translated_lower = translated.lower()
    for film in movies.values():
        if film['title'].lower() == translated_lower:
            return film
    for film in movies.values():
        if translated_lower in film['title'].lower():
            return film
    titles = [f['title'] for f in movies.values()]
    matches = get_close_matches(translated, titles, n=1, cutoff=0.5)
    if matches:
        return next(f for f in movies.values() if f['title'] == matches[0])
    return None

# ===== –ü–æ–∫–∞–∑ —Ñ—ñ–ª—å–º—É =====
async def show_film(update: Update, context: ContextTypes.DEFAULT_TYPE, code_or_text: str):
    user = update.effective_user
    update_user_stats(user)
    film = find_film_by_text(code_or_text)
    message = get_message(update)
    if not film:
        await message.reply_text("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard(user.id == ADMIN_ID))
        return
    last_msg = context.user_data.get("last_film_message")
    text = f"üé¨ {film['title']}\n\n{film['desc']}\n\nüîó {film['link']}"
    if last_msg:
        try:
            await last_msg.edit_reply_markup(reply_markup=None)
        except:
            pass
    sent = await message.reply_text(text, reply_markup=film_keyboard(film['title'], user.id == ADMIN_ID))
    context.user_data["last_film_message"] = sent

# ===== –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º =====
async def random_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not movies:
        await get_message(update).reply_text("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    await show_film(update, context, code)

# ===== –°—Ç–∞—Ä—Ç =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    update_user_stats(user)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã –í–≤–µ–¥–∏ –∫–æ–¥ –∞–±–æ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É, —Ç–∞–∫–æ–∂ –Ω–∏–∂—á–µ —î –∫–Ω–æ–ø–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É.",
        reply_markup=main_keyboard(user.id == ADMIN_ID)
    )

# ===== –†–æ–∑—ñ–≥—Ä–∞—à —â–æ–º—ñ—Å—è—á–Ω–∏–π =====
async def monthly_raffle(context: ContextTypes.DEFAULT_TYPE):
    participants = [uid for uid, u in user_stats.items() if u.get("raffle")]
    if participants:
        winner_id = random.choice(participants)
        try:
            await context.bot.send_message(
                chat_id=int(winner_id),
                text="üèÜ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –º—ñ—Å—è—á–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É MEGOGO!",
                reply_markup=winner_keyboard()
            )
        except Exception as e:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è:", e)

    # –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç—ñ
    for uid in user_stats:
        user_stats[uid]["raffle"] = False
    save_user_stats()

    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
    for uid in user_stats:
        try:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="raffle_join")]])
            await context.bot.send_message(
                chat_id=int(uid),
                text="üéÅ –ù–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à MEGOGO —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å.",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {uid}: {e}")

# ===== –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä =====
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    update_user_stats(user)
    text = update.message.text if update.message else ""
    user_id = user.id

    # ===== –†–æ–∑—Å–∏–ª–∫–∞ =====
    if context.user_data.get("awaiting_broadcast"):
        context.user_data["broadcast_message"] = update.message
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="broadcast_confirm")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="broadcast_cancel")]
        ])
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º?",
            reply_markup=keyboard
        )
        return

    # ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
    if context.user_data.get("awaiting_support"):
        topic = context.user_data.get("support_topic", "support")
        support_requests.setdefault(str(user_id), []).append({"topic": topic, "message": text})
        with open(SUPPORT_FILE, "w", encoding="utf-8") as f:
            json.dump(support_requests, f, indent=2, ensure_ascii=False)
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É!")
        await context.bot.send_message(chat_id=ADMIN_ID,
            text=f"‚úâÔ∏è –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É\n\nüë§ –í—ñ–¥: @{user.username}\nüÜî ID: {user_id}\nüìÇ –†–æ–∑–¥—ñ–ª: {topic}\n\nüì® –¢–µ–∫—Å—Ç:\n{text}",
            reply_markup=admin_reply_keyboard(user_id))
        context.user_data["awaiting_support"] = False
        context.user_data["support_topic"] = None
        return

    # ===== –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞ =====
    awaiting_reply_id = context.user_data.get("awaiting_admin_reply")
    if awaiting_reply_id and user_id == ADMIN_ID:
        try:
            await context.bot.send_message(chat_id=awaiting_reply_id, text=f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{text}")
            await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {e}")
        context.user_data["awaiting_admin_reply"] = None
        return

    # ===== –ü–æ–∫–∞–∑ —Ñ—ñ–ª—å–º—É =====
    await show_film(update, context, text)

# ===== Callback handler =====
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    update_user_stats(query.from_user)
    data = query.data

    if data == "random_film":
        await random_film(update, context)
    elif data == "raffle":
        await raffle(update, context)
    elif data == "raffle_join":
        await raffle_join_handler(update, context)
    elif data == "support":
        await support(update, context)
    elif data.startswith("support_"):
        await support_topic_handler(update, context)
    elif data.startswith("reply_"):
        await admin_reply_handler(update, context)
    elif data == "stats":
        if query.from_user.id == ADMIN_ID:
            await stats(update, context)
        else:
            await query.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –±–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    elif data == "raffle_participants":
        if query.from_user.id == ADMIN_ID:
            await raffle_participants_handler(update, context)
        else:
            await query.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –±–∞—á–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É.")
    elif data == "broadcast":
        if query.from_user.id == ADMIN_ID:
            context.user_data["awaiting_broadcast"] = True
            await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")
    elif data == "broadcast_confirm":
        if query.from_user.id == ADMIN_ID and context.user_data.get("broadcast_message"):
            msg = context.user_data.pop("broadcast_message")
            for uid in user_stats:
                try:
                    if msg.text:
                        await context.bot.send_message(chat_id=int(uid), text=msg.text)
                    elif msg.photo:
                        await context.bot.send_photo(chat_id=int(uid), photo=msg.photo[-1].file_id, caption=msg.caption or "")
                    elif msg.video:
                        await context.bot.send_video(chat_id=int(uid), video=msg.video.file_id, caption=msg.caption or "")
                except Exception as e:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {uid}: {e}")
            await query.message.reply_text("‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞!")
            context.user_data["awaiting_broadcast"] = False
    elif data == "broadcast_cancel":
        context.user_data["awaiting_broadcast"] = False
        await query.message.reply_text("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")

# ===== –†–æ–∑—ñ–≥—Ä–∞—à =====
async def raffle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    update_user_stats(user)
    message = get_message(update)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="raffle_join")]])
    await message.reply_text(
        "üéÅ –†–æ–∑—ñ–≥—Ä–∞—à MEGOGO!\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.",
        reply_markup=keyboard
    )

async def raffle_join_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    if user_id not in user_stats:
        update_user_stats(query.from_user)
    user_stats[user_id]["raffle"] = True
    save_user_stats()
    await query.message.edit_text("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ MEGOGO!")

# ===== MAIN =====
async def main_async():
    app = ApplicationBuilder().token(TOKEN).build()
    await app.bot.delete_webhook(drop_pending_updates=True)

    # –•–µ–Ω–¥–ª–µ—Ä–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # Scheduler
    scheduler = AsyncIOScheduler()
    scheduler.add_job(monthly_raffle, CronTrigger(day=1, hour=0, minute=0), args=[app])
    scheduler.start()

    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main_async())

