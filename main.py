import os
import json
import random
import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
DATABASE_URL = os.getenv("DATABASE_URL")

if not TOKEN or not ADMIN_ID or not DATABASE_URL:
    raise ValueError("BOT_TOKEN, ADMIN_ID –∞–±–æ DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ.")

support_mode_users = set()
reply_mode_admin = {}  # {admin_id: user_id_to_reply}

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ])

def get_film_keyboard(share_text):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=share_text),
         InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ])

# ===== –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö =====
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id BIGINT PRIMARY KEY,
            name TEXT,
            visits INT
        );
    """)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS support_messages (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            message TEXT,
            answered BOOLEAN DEFAULT FALSE,
            admin_reply TEXT,
            created_at TIMESTAMP DEFAULT now()
        );
    """)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS broadcasts (
            id SERIAL PRIMARY KEY,
            message TEXT,
            sent_at TIMESTAMP DEFAULT now()
        );
    """)
    await conn.close()

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.username or update.effective_user.full_name

    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT visits FROM user_stats WHERE user_id=$1;", user_id)
    if row:
        visits = row['visits'] + 1
        await conn.execute("UPDATE user_stats SET visits=$1, name=$2 WHERE user_id=$3;", visits, user_name, user_id)
    else:
        visits = 1
        await conn.execute("INSERT INTO user_stats(user_id, name, visits) VALUES($1,$2,$3);", user_id, user_name, visits)
    await conn.close()

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ú–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –∞–±–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É.",
        reply_markup=get_main_keyboard()
    )

# ===== –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º =====
async def random_film_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not movies:
        await query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    film = movies[code]
    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    await query.message.reply_text(
        text, parse_mode="Markdown", reply_markup=get_film_keyboard(text)
    )
    await query.answer()

async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if code in movies:
        film = movies[code]
        text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
        await update.message.reply_text(
            text, parse_mode="Markdown", reply_markup=get_film_keyboard(text)
        )
    else:
        await update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())

# ===== –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ =====
async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    support_mode_users.add(user_id)
    await query.answer()
    await query.message.reply_text("‚úç –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ.")

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    text = update.message.text

    if user_id == ADMIN_ID and user_id in reply_mode_admin:
        target_user_id = reply_mode_admin[user_id]
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("""
            UPDATE support_messages
            SET answered = TRUE, admin_reply = $1
            WHERE user_id = $2 AND answered = FALSE
        """, text, target_user_id)
        await conn.close()

        try:
            await context.bot.send_message(chat_id=target_user_id, text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{text}")
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        except:
            await update.message.reply_text("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        return

    if user_id in support_mode_users:
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute(
            "INSERT INTO support_messages(user_id, username, message) VALUES($1,$2,$3);",
            user_id, username, text
        )
        await conn.close()

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\nüë§ {username} (ID: {user_id})\n\nüí¨ {text}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úè –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]])
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
        support_mode_users.remove(user_id)
    else:
        await find_movie(update, context)

async def reply_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data.startswith("reply_"):
        target_user_id = int(data.split("_")[1])
        reply_mode_admin[ADMIN_ID] = target_user_id
        await query.answer()
        await query.message.reply_text(
            f"‚úç –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (ID: {target_user_id}).\n"
            f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /stopreply —â–æ–± –≤–∏–π—Ç–∏."
        )

async def stop_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID and ADMIN_ID in reply_mode_admin:
        del reply_mode_admin[ADMIN_ID]
        await update.message.reply_text("üö™ –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
    else:
        await update.message.reply_text("‚ö† –í–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

# ===== –†–æ–∑—Å–∏–ª–∫–∞ =====
async def broadcast(context: ContextTypes.DEFAULT_TYPE, text: str):
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT user_id FROM user_stats;")
    await conn.execute("INSERT INTO broadcasts(message) VALUES($1);", text)
    await conn.close()

    for row in rows:
        try:
            await context.bot.send_message(chat_id=row['user_id'], text=text)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {row['user_id']}: {e}")

async def send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º.")
        return
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /sendall")
        return
    await broadcast(context, text)
    await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT * FROM user_stats;")
    await conn.close()
    if not rows:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä–æ–∂–Ω—è.")
        return
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for row in rows:
        text += f"üë§ {row['name']} (ID: {row['user_id']}) ‚Äî –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {row['visits']}\n"
    await update.message.reply_text(text)

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    import asyncio
    asyncio.run(init_db())

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("sendall", send_all))
    app.add_handler(CommandHandler("stats", send_stats))
    app.add_handler(CommandHandler("stopreply", stop_reply))

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_support_message))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), find_movie))

    app.add_handler(CallbackQueryHandler(random_film_callback, pattern="random_film"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="support"))
    app.add_handler(CallbackQueryHandler(reply_callback, pattern="reply_"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
