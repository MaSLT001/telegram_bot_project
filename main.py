import os
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)

# ===== –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è =====
MOVIES_FILE = "movies.json"
STATS_FILE = "user_stats.json"

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö =====
if os.path.exists(MOVIES_FILE):
    with open(MOVIES_FILE, "r", encoding="utf-8") as f:
        movies = json.load(f)
else:
    movies = {}  # {–∫–æ–¥: {"title": "–Ω–∞–∑–≤–∞", "link": "–ø–æ—Å–∏–ª–∞–Ω–Ω—è"}}

if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}  # {user_id: {"name": str, "visits": int, "last_active": str}}

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

# ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó =====
def save_movies():
    with open(MOVIES_FILE, "w", encoding="utf-8") as f:
        json.dump(movies, f, ensure_ascii=False, indent=4)

def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)

def update_user_stats(user):
    user_id = str(user.id)
    user_name = user.username or user.full_name
    stats = user_stats.get(user_id, {"name": user_name, "visits": 0, "last_active": ""})
    stats["visits"] += 1
    stats["last_active"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_stats[user_id] = stats
    save_stats()

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_stats(update.effective_user)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É.",
        reply_markup=get_main_keyboard()
    )

# ===== Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ =====
async def random_film_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()
    if movies:
        code, film = random.choice(list(movies.items()))
        await query.message.reply_text(f"üé¨ {film['title']}\nüîó {film['link']}\n–ö–æ–¥: {code}")
    else:
        await query.message.reply_text("–°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()
    await query.message.reply_text("üí¨ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—É.")

# ===== –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()
    update_user_stats(user)

    if text in movies:
        film = movies[text]
        await update.message.reply_text(f"üé¨ {film['title']}\nüîó {film['link']}")
    else:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.full_name} (ID: {user.id}):\n{text}"
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.")

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞ =====
async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid, info in user_stats.items():
        text += f"üë§ {info['name']} (ID: {uid}) ‚Äî –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {info['visits']}, –æ—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {info['last_active']}\n"
    await update.message.reply_text(text)

# ===== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è =====
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", send_stats))

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.add_handler(CallbackQueryHandler(random_film_callback, pattern="random_film"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="support"))

    await app.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.idle()

import asyncio
asyncio.run(main())
