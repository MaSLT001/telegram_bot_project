import os
import json
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ===== –§–∞–π–ª–∏ =====
MOVIES_FILE = "movies.json"
STATS_FILE = "user_stats.json"
SERVICE_ACCOUNT_FILE = "/etc/secrets/service_account.json"
SHEET_NAME = "BotStats"

# ===== –ó–º—ñ–Ω–Ω—ñ =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ =====
if os.path.exists(MOVIES_FILE):
    with open(MOVIES_FILE, "r", encoding="utf-8") as f:
        movies = json.load(f)
else:
    movies = {}

# ===== –õ–æ–∫–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)

# ===== Google Sheets =====
scope = ["https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE, scope)
gc = gspread.authorize(creds)

try:
    sh = gc.open(SHEET_NAME)
except gspread.SpreadsheetNotFound:
    sh = gc.create(SHEET_NAME)
    sh.share(None, perm_type='anyone', role='writer')
worksheet = sh.sheet1

# ===== –û–Ω–æ–≤–ª–µ–Ω–Ω—è Google —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====
def update_google_stats(user_id, user_name):
    records = worksheet.get_all_records()
    for i, record in enumerate(records, start=2):
        if str(record.get("UserID")) == str(user_id):
            visits = int(record.get("Visits", 0)) + 1
            worksheet.update(f"C{i}", visits)
            worksheet.update(f"D{i}", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            return
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î ‚Äî –¥–æ–¥–∞—î–º–æ
    worksheet.append_row([user_name, user_id, 1, datetime.now().strftime("%Y-%m-%d %H:%M:%S")])

# ===== –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ =====
def update_user(user):
    user_id = str(user.id)
    user_name = user.username or user.full_name
    user_stats[user_id] = {
        "name": user_name,
        "visits": user_stats.get(user_id, {}).get("visits", 0) + 1,
        "last_active": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    save_stats()
    update_google_stats(user_id, user_name)

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user(update.effective_user)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
    )

# ===== –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É =====
async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user(update.effective_user)
    code = update.message.text.strip()
    film = movies.get(code)
    if film:
        text = f"üé¨ {film.get('title')}\nüîó {film.get('link')}"
    else:
        text = "‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(text)

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞ =====
async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid, info in user_stats.items():
        text += f"üë§ {info['name']} (ID: {uid}) ‚Äî –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {info['visits']}\n"
    await update.message.reply_text(text)

# ===== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è =====
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", send_stats))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), find_movie))

    await app.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.idle()

import asyncio
asyncio.run(main())
