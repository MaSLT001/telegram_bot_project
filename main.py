import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ =====
STATS_FILE = "stats.json"
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ Environment Variables =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

if not TOKEN or not ADMIN_ID:
    raise ValueError("BOT_TOKEN –∞–±–æ ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ environment variables.")

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")]
    ])

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.username or update.effective_user.full_name

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_stats[user_id] = {
        "name": user_name,
        "visits": user_stats.get(user_id, {}).get("visits", 0) + 1
    }
    save_stats()

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ú–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –∞–±–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É.",
        reply_markup=get_main_keyboard()
    )

# ===== –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º =====
async def random_film_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not movies:
        await query.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code = random.choice(list(movies.keys()))
    film = movies[code]
    text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
    await query.message.reply_text(text, parse_mode="Markdown")
    await query.answer()

async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if code in movies:
        film = movies[code]
        text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
        await update.message.reply_text(text, parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())

# ===== –†–æ–∑—Å–∏–ª–∫–∞ =====
async def broadcast(context: ContextTypes.DEFAULT_TYPE, text: str):
    for user_id in user_stats.keys():
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º.")
        return
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /sendall")
        return
    await broadcast(context, text)
    await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    total_users = len(user_stats)
    total_visits = sum(u.get("visits", 0) for u in user_stats.values())
    
    user_list = "\n".join(
        f"üë§ {u.get('name', 'Unknown')} (ID: {uid}) - –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {u.get('visits', 0)}"
        for uid, u in user_stats.items()
    )

    text = f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\nüìà –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {total_visits}\n\n–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{user_list}"
    await update.message.reply_text(text)

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    
    bot = Bot(TOKEN)
    try:
        bot.delete_webhook()
        print("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ polling.")
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("sendall", send_all))
    app.add_handler(CommandHandler("stats", send_stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, find_movie))
    app.add_handler(CallbackQueryHandler(random_film_callback, pattern="^random_film$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()
