import os
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

# ====== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Drive ======
gauth = GoogleAuth()
gauth.LocalWebserverAuth()  # –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ .LoadCredentialsFile() –¥–ª—è —Å–µ—Ä–≤—ñ—Å –∞–∫–∞—É–Ω—Ç—É
drive = GoogleDrive(gauth)

MOVIES_FILE = "movies.json"
STATS_FILE = "stats.json"

# ====== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª ======
def load_json(file_name):
    if os.path.exists(file_name):
        with open(file_name, "r", encoding="utf-8") as f:
            return json.load(f)
    return {} if "stats" in file_name else {}

def save_json(data, file_name):
    with open(file_name, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ Google Drive
    file_list = drive.ListFile({'q': f"title='{file_name}'"}).GetList()
    if file_list:
        gfile = file_list[0]
        gfile.SetContentFile(file_name)
        gfile.Upload()
    else:
        gfile = drive.CreateFile({'title': file_name})
        gfile.SetContentFile(file_name)
        gfile.Upload()

# ====== –î–∞–Ω—ñ ======
movies = load_json(MOVIES_FILE)
user_stats = load_json(STATS_FILE)

# ====== –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ======
def update_user_stats(user):
    user_id = str(user.id)
    user_name = user.username or user.full_name
    user_stats[user_id] = {
        "name": user_name,
        "visits": user_stats.get(user_id, {}).get("visits", 0) + 1,
        "last_active": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    save_json(user_stats, STATS_FILE)

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé• –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º", callback_data="random_film")],
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É", callback_data="support")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ====== –ö–æ–º–∞–Ω–¥–∏ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_stats(update.effective_user)
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –ú–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –∞–±–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É.",
        reply_markup=get_main_keyboard()
    )

async def random_film_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    if not movies:
        await update.callback_query.message.reply_text("–°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    code, film = random.choice(list(movies.items()))
    await update.callback_query.message.reply_text(f"üé¨ {film}")

async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_stats(update.effective_user)
    code = update.message.text.strip()
    if code in movies:
        film = movies[code]
        await update.message.reply_text(f"üé¨ {film}")
    else:
        await update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text(
        "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –≤–æ–Ω–æ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–µ –∞–¥–º—ñ–Ω—É."
    )

async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid, info in user_stats.items():
        text += f"üë§ {info['name']} (ID: {uid}) ‚Äî –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {info['visits']} | –æ—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {info['last_active']}\n"
    await update.message.reply_text(text)

async def add_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏.")
        return

    args = context.args
    if len(args) < 3:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addmovie <–∫–æ–¥> <–Ω–∞–∑–≤–∞> <–ø–æ—Å–∏–ª–∞–Ω–Ω—è>")
        return

    code = args[0]
    name = args[1]
    link = args[2]
    movies[code] = f"{name} ‚Äî {link}"
    save_json(movies, MOVIES_FILE)
    await update.message.reply_text(f"‚úÖ –§—ñ–ª—å–º –¥–æ–¥–∞–Ω–æ: {name} ({code})")

# ====== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ======
async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", send_stats))
    app.add_handler(CommandHandler("addmovie", add_movie))
    app.add_handler(CallbackQueryHandler(random_film_callback, pattern="random_film"))
    app.add_handler(CallbackQueryHandler(support_callback, pattern="support"))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), find_movie))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.start()
    await app.idle()

import asyncio
asyncio.run(main())
