import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ =====
try:
    with open("movies.json", "r", encoding="utf-8") as f:
        movies = json.load(f)
except FileNotFoundError:
    movies = {}

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
STATS_FILE = "stats.json"
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# ===== –†–µ–∞–∫—Ü—ñ—ó =====
REACTIONS_FILE = "reactions.json"
if os.path.exists(REACTIONS_FILE):
    with open(REACTIONS_FILE, "r", encoding="utf-8") as f:
        reactions = json.load(f)
else:
    reactions = {}  # {movie_code: {reaction_type: [user_id, ...]}}

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ Environment Variables =====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables.")
if not ADMIN_ID:
    raise ValueError("ADMIN_ID is not set in environment variables.")

ADMIN_ID = int(ADMIN_ID)

support_mode_users = set()
reply_mode_admin = {}  # {admin_id: user_id_to_reply}

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====
def get_film_keyboard(share_text, movie_code):
    movie_reacts = reactions.get(movie_code, {})
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=share_text),
            InlineKeyboardButton("üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
        ],
        [
            InlineKeyboardButton(f"üëç {len(movie_reacts.get('like', []))}", callback_data=f"react_{movie_code}_like"),
            InlineKeyboardButton(f"üëé {len(movie_reacts.get('dislike', []))}", callback_data=f"react_{movie_code}_dislike"),
            InlineKeyboardButton(f"üòÇ {len(movie_reacts.get('laugh', []))}", callback_data=f"react_{movie_code}_laugh"),
            InlineKeyboardButton(f"‚ù§Ô∏è {len(movie_reacts.get('heart', []))}", callback_data=f"react_{movie_code}_heart"),
            InlineKeyboardButton(f"üí© {len(movie_reacts.get('poop', []))}", callback_data=f"react_{movie_code}_poop")
        ]
    ])

def get_start_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º", callback_data="random_movie")]
    ])

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.username or update.effective_user.full_name

    user_stats[user_id] = {
        "name": user_name,
        "visits": user_stats.get(user_id, {}).get("visits", 0) + 1
    }
    save_stats()

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É –∞–±–æ –æ–±–µ—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —Ñ—ñ–ª—å–º:",
        reply_markup=get_start_keyboard()
    )

async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE, code=None):
    if not code:
        code = update.message.text.strip()
    if code in movies:
        film = movies[code]
        text = f"üé¨ *{film['title']}*\n\n{film['desc']}\n\nüîó {film['link']}"
        await update.message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_film_keyboard(share_text=text, movie_code=code)
        )
    else:
        await update.message.reply_text("‚ùå –§—ñ–ª—å–º –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def random_movie_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()
    if not movies:
        await query.message.reply_text("–§—ñ–ª—å–º–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return
    code = random.choice(list(movies.keys()))
    await find_movie(update=query, context=context, code=code)

# ===== –†–µ–∞–∫—Ü—ñ—ó =====
async def reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    _, movie_code, reaction_type = data.split("_")
    user_id = query.from_user.id

    if movie_code not in reactions:
        reactions[movie_code] = {"like": [], "dislike": [], "laugh": [], "heart": [], "poop": []}

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω—à–æ–≥–æ —Ç–∏–ø—É
    for key in reactions[movie_code]:
        if user_id in reactions[movie_code][key] and key != reaction_type:
            reactions[movie_code][key].remove(user_id)

    if user_id not in reactions[movie_code][reaction_type]:
        reactions[movie_code][reaction_type].append(user_id)
        save_reactions()

    share_text = f"üé¨ {movies[movie_code]['title']} - –ü–æ–¥—ñ–ª–∏—Å—è!"
    await query.message.edit_reply_markup(reply_markup=get_film_keyboard(share_text, movie_code))
    await query.answer(f"–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ {reaction_type}")

# ===== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è =====
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)

def save_reactions():
    with open(REACTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(reactions, f, ensure_ascii=False, indent=4)

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(random_movie_callback, pattern="^random_movie$"))
    app.add_handler(CallbackQueryHandler(reaction_callback, pattern="^react_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, find_movie))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()
